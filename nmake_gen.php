<?php

  // attempts to generate an nmake makefile from c/c++ files
  // only supports console exes for now
  
  $makefile = 'Makefile.nmake';
  // scan dir
  $target = 'src';
  // objs and exes will be dumped here
  $output = 'bin';
  
  // from http://stackoverflow.com/questions/17160696/php-glob-scan-in-subfolders-for-a-file
  // Does not support flag GLOB_BRACE
  function rglob($pattern, $flags = 0) {
      $files = glob($pattern, $flags); 
      foreach (glob(dirname($pattern).'/*', GLOB_ONLYDIR|GLOB_NOSORT) as $dir) {
          $files = array_merge($files, rglob($dir.'/'.basename($pattern), $flags));
      }
      return $files;
  }
  
  // not perfect but should do
  function sanitize($path)
  {
    if(is_array($path))
    {
      foreach($path as $k=>$v)
        $path[$k] = sanitize($v);
      return $path;
    }
    
    $path = ltrim(ltrim($path), './\\');
    return rtrim(str_replace('\\\\', '\\', str_replace('/', '\\', $path)), '\\');
  }
  
  // I... hope it works
  // recursively check for deps and subdeps, exclude dep loops
  function getdeps($deps, $cur, $ban=[])
  {
    $ret = [];
    foreach($cur as $file)
    if(!in_array($file, $ban))
    {
      $ret = array_merge($ret, [$file]);
      if(isset($deps[$file]))
        $ret = array_merge($ret, getdeps($deps, $deps[$file], array_merge($ret, $ban)));
    }
    return $ret;
  }
  
  function outname($dir, $path, $ext)
  {
    if(is_array($path))
    {
      foreach($path as $k=>$v)
        $path[$k] = outname($dir, $v, $ext);
      return $path;
    }
    return "$dir\\".pathinfo($path, PATHINFO_FILENAME).".$ext";
  }
  
  
  $ver = '0.1a';
  $write = "# generated by nmake_gen $ver\n".
            "# https://github.com/tostercx/php_scripts\n".
            "#\n".
            "# usage\n".
            "# build all:      nmake -f Makefile.nmake\n".
            "# clean:          nmake -f Makefile.nmake clean\n".
            "# clean & build:  nmake -f Makefile.nmake rebuild\n".
            "#\n\n\n".
            "LD = link\n".
            "LDFLAGS = /nologo\n".
            "CFLAGS = /nologo /c /I$target\\ /Fo$output\\ \n".
            "\n\n";
  
  $exts = ['c', 'cpp', 'cxx', 'h', 'hpp'];
  $objs = ['c', 'cpp', 'cxx'];
  $src_files = [];
  $deps = [];
  $exes = [];
  
  foreach($exts as $ext)
    $src_files = array_merge($src_files, rglob("$target/*.$ext"));
  $src_files = sanitize($src_files);
  
  // build dep array
  foreach($src_files as $file)
  {
    $data = file_get_contents($file);
    
    // find deps
    if(preg_match_all('~^\s?#include\s+["<](.*?)[">]~m', $data, $match))
    foreach($match[1] as $inc)
    {
      $ipath = dirname($file)."\\$inc";
      if(file_exists($ipath))
        $deps[$file][] = $ipath;
    }
    
    // check if has main
    if(preg_match('~\smain\s?\(~', $data))
      $exes[] = $file;
  }
  
  // write pseudotargets
  $write .= "all: prep ".implode(" ", outname($output, $exes, "exe"))."\n".
             "\n".
             "prep:\n".
             "  @if not exist bin mkdir bin\n".
             "\n".
             "rebuild: clean all\n".
             "\n".
             "clean:\n".
             "  @if exist bin rd /s /q bin\n".
             "\n\n";
  
  // write objects with deps and subdeps
  foreach($src_files as $file)
  if(in_array(pathinfo($file, PATHINFO_EXTENSION), $objs))
  {
    $alldeps = implode(" ", getdeps($deps, [$file]));
    
    // todo: check for obj name colision from subfolders
    $obj = outname($output, $file, "obj");
    
    $write .= "$obj: $alldeps\n";
    $write .= "  @\$(CC) \$(CFLAGS) $file\n\n";
  }
  
  $write .= "\n\n";
  
  // write linkables
  foreach($src_files as $file)
  if(in_array($file, $exes))
  {
    $alldeps = [outname($output, $file, "obj")];
    
    // just dump all non-exe objects
    // todo: find a better way to do this
    foreach($src_files as $dep)
    if(in_array(pathinfo($dep, PATHINFO_EXTENSION), $objs))
    if(!in_array($dep, $exes))
      $alldeps[] = outname($output, $dep, "obj");
    
    // todo: check for obj name colision from subfolders
    $exe = outname($output, $file, "exe");
    $alldeps = implode(" ", $alldeps);
    
    $write .= "$exe: $alldeps\n";
    $write .= "  @\$(LD) /out:\$@ \$(LDFLAGS) \$**\n\n";
  }
  
  file_put_contents($makefile, $write);

?>
